pipeline {
    agent any
    stages {
        stage('Get Code') {
            steps {
                git 'https://github.com/juancargq/helloworld.git'
                bat 'dir'
            }
        }
        
        stage('Unit') {
            steps {
                bat '''
                    SET PYTHONPATH=.
                    pytest --junitxml=junit-report.xml test/unit
                '''
                junit 'junit-report.xml'
            }
        }
        
        stage('Rest') {
            steps {
                bat '''
                    SET FLASK_APP=app/api.py
                    start flask run
                    pytest test/rest
                '''
            }
        }
        
        stage('Coverage') {
            steps {
                bat '''
                    coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit
                    coverage xml
                '''
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,0,80', lineCoverageTargets: '100,0,90'
                }
            }
        }
        
        stage('Static') {
            steps {
                bat '''
                    flake8 --exit-zero --format=pylint app > flake8.out
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 10, type: 'TOTAL', unstable: true], [threshold: 11, type: 'TOTAL', unstable: false]]
            }
        }
        
        stage('Security Test') {
            steps {
                bat '''
                    bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 3, type: 'TOTAL', unstable: true], [threshold: 5, type: 'TOTAL', unstable: false]]
            }
        }
    }
}