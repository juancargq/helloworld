pipeline {
    agent any
    stages {
        stage('Get Code') {
            steps {
                git 'https://github.com/juancargq/helloworld.git'
                bat '''
                    hostname
                    whoami
                    dir
                    echo %WORKSPACE%
                '''
                stash includes: '**/*', excludes: 'Jenkinsfile*', name: 'repo-files'
            }
        }
        
        stage('Parallel Unit-Static') {
            parallel {
                stage('Unit') {
                    agent {
                        label 'agente1'
                    }
                    steps {
                        unstash 'repo-files'
                        bat '''
                            hostname
                            whoami
                            echo %WORKSPACE%
                            SET PYTHONPATH=.
                            coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest --junitxml=junit-report.xml test/unit
                        '''
                        junit 'junit-report.xml'
                        stash includes: '.coverage', name: 'cobertura-report'
                    }
                }
                stage('Static') {
                    agent {
                        label 'agente2'
                    }
                    steps {
                        unstash 'repo-files'
                        bat '''
                            hostname
                            whoami
                            echo %WORKSPACE%
                            flake8 --exit-zero --format=pylint app > flake8.out
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                        }
                    }
                }
            }
        }
        
        stage('Parallel Coverage-Security') {
            parallel {
                stage('Coverage') {
                    agent {
                        label 'agente1'
                    }
                    steps {
                        unstash 'cobertura-report'
                        bat '''
                            hostname
                            whoami
                            echo %WORKSPACE%
                            coverage xml
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '90,80,80', lineCoverageTargets: '95,85,85'
                        }
                    }
                }
                stage('Security') {
                    agent {
                        label 'agente2'
                    }
                    steps {
                        unstash 'repo-files'
                        bat '''
                            hostname
                            whoami
                            echo %WORKSPACE%
                            bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                        }
                    }
                }
            }
        }

        stage('Performance') {
            steps {
                unstash 'repo-files'
                bat '''
                    hostname
                    whoami
                    echo %WORKSPACE%
                    SET FLASK_APP=app/api.py
                    start flask run
                    C:/Users/jcgom/Documents/apache-jmeter/bin/jmeter.bat -n -t test/jmeter/caso-practico-1b.jmx -f -l caso-practico-1b.jtl
                '''
                perfReport sourceDataFiles: 'caso-practico-1b.jtl'
            }
        }
    }
}